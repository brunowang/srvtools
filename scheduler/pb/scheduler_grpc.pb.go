// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package scheduler

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SchedulerServiceClient is the client API for SchedulerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SchedulerServiceClient interface {
	StartSchedule(ctx context.Context, in *StartScheduleReq, opts ...grpc.CallOption) (*StartScheduleRsp, error)
	CancelSchedule(ctx context.Context, in *CancelScheduleReq, opts ...grpc.CallOption) (*Empty, error)
	RefreshScheduleTime(ctx context.Context, in *RefreshScheduleTimeReq, opts ...grpc.CallOption) (*Empty, error)
	GetReadySchedule(ctx context.Context, in *GetReadyScheduleReq, opts ...grpc.CallOption) (*GetReadyScheduleRsp, error)
	GetScheduleTime(ctx context.Context, in *GetScheduleTimeReq, opts ...grpc.CallOption) (*GetScheduleTimeRsp, error)
	CreateSchedulePlan(ctx context.Context, in *CreateSchedulePlanReq, opts ...grpc.CallOption) (*CreateSchedulePlanRsp, error)
}

type schedulerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSchedulerServiceClient(cc grpc.ClientConnInterface) SchedulerServiceClient {
	return &schedulerServiceClient{cc}
}

func (c *schedulerServiceClient) StartSchedule(ctx context.Context, in *StartScheduleReq, opts ...grpc.CallOption) (*StartScheduleRsp, error) {
	out := new(StartScheduleRsp)
	err := c.cc.Invoke(ctx, "/brunowang.srvtools.scheduler.SchedulerService/StartSchedule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerServiceClient) CancelSchedule(ctx context.Context, in *CancelScheduleReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/brunowang.srvtools.scheduler.SchedulerService/CancelSchedule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerServiceClient) RefreshScheduleTime(ctx context.Context, in *RefreshScheduleTimeReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/brunowang.srvtools.scheduler.SchedulerService/RefreshScheduleTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerServiceClient) GetReadySchedule(ctx context.Context, in *GetReadyScheduleReq, opts ...grpc.CallOption) (*GetReadyScheduleRsp, error) {
	out := new(GetReadyScheduleRsp)
	err := c.cc.Invoke(ctx, "/brunowang.srvtools.scheduler.SchedulerService/GetReadySchedule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerServiceClient) GetScheduleTime(ctx context.Context, in *GetScheduleTimeReq, opts ...grpc.CallOption) (*GetScheduleTimeRsp, error) {
	out := new(GetScheduleTimeRsp)
	err := c.cc.Invoke(ctx, "/brunowang.srvtools.scheduler.SchedulerService/GetScheduleTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerServiceClient) CreateSchedulePlan(ctx context.Context, in *CreateSchedulePlanReq, opts ...grpc.CallOption) (*CreateSchedulePlanRsp, error) {
	out := new(CreateSchedulePlanRsp)
	err := c.cc.Invoke(ctx, "/brunowang.srvtools.scheduler.SchedulerService/CreateSchedulePlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SchedulerServiceServer is the server API for SchedulerService service.
// All implementations must embed UnimplementedSchedulerServiceServer
// for forward compatibility
type SchedulerServiceServer interface {
	StartSchedule(context.Context, *StartScheduleReq) (*StartScheduleRsp, error)
	CancelSchedule(context.Context, *CancelScheduleReq) (*Empty, error)
	RefreshScheduleTime(context.Context, *RefreshScheduleTimeReq) (*Empty, error)
	GetReadySchedule(context.Context, *GetReadyScheduleReq) (*GetReadyScheduleRsp, error)
	GetScheduleTime(context.Context, *GetScheduleTimeReq) (*GetScheduleTimeRsp, error)
	CreateSchedulePlan(context.Context, *CreateSchedulePlanReq) (*CreateSchedulePlanRsp, error)
	mustEmbedUnimplementedSchedulerServiceServer()
}

// UnimplementedSchedulerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSchedulerServiceServer struct {
}

func (UnimplementedSchedulerServiceServer) StartSchedule(context.Context, *StartScheduleReq) (*StartScheduleRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartSchedule not implemented")
}
func (UnimplementedSchedulerServiceServer) CancelSchedule(context.Context, *CancelScheduleReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelSchedule not implemented")
}
func (UnimplementedSchedulerServiceServer) RefreshScheduleTime(context.Context, *RefreshScheduleTimeReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshScheduleTime not implemented")
}
func (UnimplementedSchedulerServiceServer) GetReadySchedule(context.Context, *GetReadyScheduleReq) (*GetReadyScheduleRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReadySchedule not implemented")
}
func (UnimplementedSchedulerServiceServer) GetScheduleTime(context.Context, *GetScheduleTimeReq) (*GetScheduleTimeRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScheduleTime not implemented")
}
func (UnimplementedSchedulerServiceServer) CreateSchedulePlan(context.Context, *CreateSchedulePlanReq) (*CreateSchedulePlanRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSchedulePlan not implemented")
}
func (UnimplementedSchedulerServiceServer) mustEmbedUnimplementedSchedulerServiceServer() {}

// UnsafeSchedulerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SchedulerServiceServer will
// result in compilation errors.
type UnsafeSchedulerServiceServer interface {
	mustEmbedUnimplementedSchedulerServiceServer()
}

func RegisterSchedulerServiceServer(s grpc.ServiceRegistrar, srv SchedulerServiceServer) {
	s.RegisterService(&SchedulerService_ServiceDesc, srv)
}

func _SchedulerService_StartSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartScheduleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServiceServer).StartSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/brunowang.srvtools.scheduler.SchedulerService/StartSchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServiceServer).StartSchedule(ctx, req.(*StartScheduleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchedulerService_CancelSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelScheduleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServiceServer).CancelSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/brunowang.srvtools.scheduler.SchedulerService/CancelSchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServiceServer).CancelSchedule(ctx, req.(*CancelScheduleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchedulerService_RefreshScheduleTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshScheduleTimeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServiceServer).RefreshScheduleTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/brunowang.srvtools.scheduler.SchedulerService/RefreshScheduleTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServiceServer).RefreshScheduleTime(ctx, req.(*RefreshScheduleTimeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchedulerService_GetReadySchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReadyScheduleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServiceServer).GetReadySchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/brunowang.srvtools.scheduler.SchedulerService/GetReadySchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServiceServer).GetReadySchedule(ctx, req.(*GetReadyScheduleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchedulerService_GetScheduleTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScheduleTimeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServiceServer).GetScheduleTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/brunowang.srvtools.scheduler.SchedulerService/GetScheduleTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServiceServer).GetScheduleTime(ctx, req.(*GetScheduleTimeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchedulerService_CreateSchedulePlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSchedulePlanReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServiceServer).CreateSchedulePlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/brunowang.srvtools.scheduler.SchedulerService/CreateSchedulePlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServiceServer).CreateSchedulePlan(ctx, req.(*CreateSchedulePlanReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SchedulerService_ServiceDesc is the grpc.ServiceDesc for SchedulerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SchedulerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "brunowang.srvtools.scheduler.SchedulerService",
	HandlerType: (*SchedulerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartSchedule",
			Handler:    _SchedulerService_StartSchedule_Handler,
		},
		{
			MethodName: "CancelSchedule",
			Handler:    _SchedulerService_CancelSchedule_Handler,
		},
		{
			MethodName: "RefreshScheduleTime",
			Handler:    _SchedulerService_RefreshScheduleTime_Handler,
		},
		{
			MethodName: "GetReadySchedule",
			Handler:    _SchedulerService_GetReadySchedule_Handler,
		},
		{
			MethodName: "GetScheduleTime",
			Handler:    _SchedulerService_GetScheduleTime_Handler,
		},
		{
			MethodName: "CreateSchedulePlan",
			Handler:    _SchedulerService_CreateSchedulePlan_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/brunowang/srvtools/scheduler/pb/scheduler.proto",
}
