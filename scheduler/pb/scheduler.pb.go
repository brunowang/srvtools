// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.6.1
// source: github.com/brunowang/srvtools/scheduler/pb/scheduler.proto

package scheduler

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StartScheduleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item *ScheduleItem `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *StartScheduleReq) Reset() {
	*x = StartScheduleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_brunowang_srvtools_scheduler_pb_scheduler_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartScheduleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartScheduleReq) ProtoMessage() {}

func (x *StartScheduleReq) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_brunowang_srvtools_scheduler_pb_scheduler_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartScheduleReq.ProtoReflect.Descriptor instead.
func (*StartScheduleReq) Descriptor() ([]byte, []int) {
	return file_github_com_brunowang_srvtools_scheduler_pb_scheduler_proto_rawDescGZIP(), []int{0}
}

func (x *StartScheduleReq) GetItem() *ScheduleItem {
	if x != nil {
		return x.Item
	}
	return nil
}

type StartScheduleRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId int64 `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
}

func (x *StartScheduleRsp) Reset() {
	*x = StartScheduleRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_brunowang_srvtools_scheduler_pb_scheduler_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartScheduleRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartScheduleRsp) ProtoMessage() {}

func (x *StartScheduleRsp) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_brunowang_srvtools_scheduler_pb_scheduler_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartScheduleRsp.ProtoReflect.Descriptor instead.
func (*StartScheduleRsp) Descriptor() ([]byte, []int) {
	return file_github_com_brunowang_srvtools_scheduler_pb_scheduler_proto_rawDescGZIP(), []int{1}
}

func (x *StartScheduleRsp) GetItemId() int64 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

type CancelScheduleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId int64 `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
}

func (x *CancelScheduleReq) Reset() {
	*x = CancelScheduleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_brunowang_srvtools_scheduler_pb_scheduler_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelScheduleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelScheduleReq) ProtoMessage() {}

func (x *CancelScheduleReq) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_brunowang_srvtools_scheduler_pb_scheduler_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelScheduleReq.ProtoReflect.Descriptor instead.
func (*CancelScheduleReq) Descriptor() ([]byte, []int) {
	return file_github_com_brunowang_srvtools_scheduler_pb_scheduler_proto_rawDescGZIP(), []int{2}
}

func (x *CancelScheduleReq) GetItemId() int64 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

type RefreshScheduleTimeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId int64 `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
}

func (x *RefreshScheduleTimeReq) Reset() {
	*x = RefreshScheduleTimeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_brunowang_srvtools_scheduler_pb_scheduler_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshScheduleTimeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshScheduleTimeReq) ProtoMessage() {}

func (x *RefreshScheduleTimeReq) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_brunowang_srvtools_scheduler_pb_scheduler_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshScheduleTimeReq.ProtoReflect.Descriptor instead.
func (*RefreshScheduleTimeReq) Descriptor() ([]byte, []int) {
	return file_github_com_brunowang_srvtools_scheduler_pb_scheduler_proto_rawDescGZIP(), []int{3}
}

func (x *RefreshScheduleTimeReq) GetItemId() int64 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

type GetReadyScheduleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bucket string `protobuf:"bytes,1,opt,name=bucket,proto3" json:"bucket,omitempty"`
	PlanId string `protobuf:"bytes,2,opt,name=plan_id,json=planId,proto3" json:"plan_id,omitempty"`
	Time   int64  `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`
	Count  int32  `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *GetReadyScheduleReq) Reset() {
	*x = GetReadyScheduleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_brunowang_srvtools_scheduler_pb_scheduler_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReadyScheduleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReadyScheduleReq) ProtoMessage() {}

func (x *GetReadyScheduleReq) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_brunowang_srvtools_scheduler_pb_scheduler_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReadyScheduleReq.ProtoReflect.Descriptor instead.
func (*GetReadyScheduleReq) Descriptor() ([]byte, []int) {
	return file_github_com_brunowang_srvtools_scheduler_pb_scheduler_proto_rawDescGZIP(), []int{4}
}

func (x *GetReadyScheduleReq) GetBucket() string {
	if x != nil {
		return x.Bucket
	}
	return ""
}

func (x *GetReadyScheduleReq) GetPlanId() string {
	if x != nil {
		return x.PlanId
	}
	return ""
}

func (x *GetReadyScheduleReq) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *GetReadyScheduleReq) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type GetReadyScheduleRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Schedules []*ScheduleItem `protobuf:"bytes,1,rep,name=schedules,proto3" json:"schedules,omitempty"`
}

func (x *GetReadyScheduleRsp) Reset() {
	*x = GetReadyScheduleRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_brunowang_srvtools_scheduler_pb_scheduler_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReadyScheduleRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReadyScheduleRsp) ProtoMessage() {}

func (x *GetReadyScheduleRsp) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_brunowang_srvtools_scheduler_pb_scheduler_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReadyScheduleRsp.ProtoReflect.Descriptor instead.
func (*GetReadyScheduleRsp) Descriptor() ([]byte, []int) {
	return file_github_com_brunowang_srvtools_scheduler_pb_scheduler_proto_rawDescGZIP(), []int{5}
}

func (x *GetReadyScheduleRsp) GetSchedules() []*ScheduleItem {
	if x != nil {
		return x.Schedules
	}
	return nil
}

type GetScheduleTimeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId int64  `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	PlanId string `protobuf:"bytes,2,opt,name=plan_id,json=planId,proto3" json:"plan_id,omitempty"`
}

func (x *GetScheduleTimeReq) Reset() {
	*x = GetScheduleTimeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_brunowang_srvtools_scheduler_pb_scheduler_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetScheduleTimeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetScheduleTimeReq) ProtoMessage() {}

func (x *GetScheduleTimeReq) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_brunowang_srvtools_scheduler_pb_scheduler_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetScheduleTimeReq.ProtoReflect.Descriptor instead.
func (*GetScheduleTimeReq) Descriptor() ([]byte, []int) {
	return file_github_com_brunowang_srvtools_scheduler_pb_scheduler_proto_rawDescGZIP(), []int{6}
}

func (x *GetScheduleTimeReq) GetItemId() int64 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *GetScheduleTimeReq) GetPlanId() string {
	if x != nil {
		return x.PlanId
	}
	return ""
}

type GetScheduleTimeRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time int64 `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *GetScheduleTimeRsp) Reset() {
	*x = GetScheduleTimeRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_brunowang_srvtools_scheduler_pb_scheduler_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetScheduleTimeRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetScheduleTimeRsp) ProtoMessage() {}

func (x *GetScheduleTimeRsp) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_brunowang_srvtools_scheduler_pb_scheduler_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetScheduleTimeRsp.ProtoReflect.Descriptor instead.
func (*GetScheduleTimeRsp) Descriptor() ([]byte, []int) {
	return file_github_com_brunowang_srvtools_scheduler_pb_scheduler_proto_rawDescGZIP(), []int{7}
}

func (x *GetScheduleTimeRsp) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

type CreateSchedulePlanReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Plan *SchedulePlan `protobuf:"bytes,1,opt,name=plan,proto3" json:"plan,omitempty"`
}

func (x *CreateSchedulePlanReq) Reset() {
	*x = CreateSchedulePlanReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_brunowang_srvtools_scheduler_pb_scheduler_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSchedulePlanReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSchedulePlanReq) ProtoMessage() {}

func (x *CreateSchedulePlanReq) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_brunowang_srvtools_scheduler_pb_scheduler_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSchedulePlanReq.ProtoReflect.Descriptor instead.
func (*CreateSchedulePlanReq) Descriptor() ([]byte, []int) {
	return file_github_com_brunowang_srvtools_scheduler_pb_scheduler_proto_rawDescGZIP(), []int{8}
}

func (x *CreateSchedulePlanReq) GetPlan() *SchedulePlan {
	if x != nil {
		return x.Plan
	}
	return nil
}

type CreateSchedulePlanRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlanId string `protobuf:"bytes,1,opt,name=plan_id,json=planId,proto3" json:"plan_id,omitempty"`
}

func (x *CreateSchedulePlanRsp) Reset() {
	*x = CreateSchedulePlanRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_brunowang_srvtools_scheduler_pb_scheduler_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSchedulePlanRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSchedulePlanRsp) ProtoMessage() {}

func (x *CreateSchedulePlanRsp) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_brunowang_srvtools_scheduler_pb_scheduler_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSchedulePlanRsp.ProtoReflect.Descriptor instead.
func (*CreateSchedulePlanRsp) Descriptor() ([]byte, []int) {
	return file_github_com_brunowang_srvtools_scheduler_pb_scheduler_proto_rawDescGZIP(), []int{9}
}

func (x *CreateSchedulePlanRsp) GetPlanId() string {
	if x != nil {
		return x.PlanId
	}
	return ""
}

type ScheduleItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId int64    `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	PlanId string   `protobuf:"bytes,2,opt,name=plan_id,json=planId,proto3" json:"plan_id,omitempty"`
	Params []string `protobuf:"bytes,3,rep,name=params,proto3" json:"params,omitempty"`
}

func (x *ScheduleItem) Reset() {
	*x = ScheduleItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_brunowang_srvtools_scheduler_pb_scheduler_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduleItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleItem) ProtoMessage() {}

func (x *ScheduleItem) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_brunowang_srvtools_scheduler_pb_scheduler_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleItem.ProtoReflect.Descriptor instead.
func (*ScheduleItem) Descriptor() ([]byte, []int) {
	return file_github_com_brunowang_srvtools_scheduler_pb_scheduler_proto_rawDescGZIP(), []int{10}
}

func (x *ScheduleItem) GetItemId() int64 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *ScheduleItem) GetPlanId() string {
	if x != nil {
		return x.PlanId
	}
	return ""
}

func (x *ScheduleItem) GetParams() []string {
	if x != nil {
		return x.Params
	}
	return nil
}

type SchedulePlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlanId   string `protobuf:"bytes,1,opt,name=plan_id,json=planId,proto3" json:"plan_id,omitempty"`
	HookUrl  string `protobuf:"bytes,2,opt,name=hook_url,json=hookUrl,proto3" json:"hook_url,omitempty"`
	Payload  string `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
	Interval int32  `protobuf:"varint,4,opt,name=interval,proto3" json:"interval,omitempty"`
	LoopCnt  int32  `protobuf:"varint,5,opt,name=loop_cnt,json=loopCnt,proto3" json:"loop_cnt,omitempty"`
}

func (x *SchedulePlan) Reset() {
	*x = SchedulePlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_brunowang_srvtools_scheduler_pb_scheduler_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchedulePlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchedulePlan) ProtoMessage() {}

func (x *SchedulePlan) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_brunowang_srvtools_scheduler_pb_scheduler_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchedulePlan.ProtoReflect.Descriptor instead.
func (*SchedulePlan) Descriptor() ([]byte, []int) {
	return file_github_com_brunowang_srvtools_scheduler_pb_scheduler_proto_rawDescGZIP(), []int{11}
}

func (x *SchedulePlan) GetPlanId() string {
	if x != nil {
		return x.PlanId
	}
	return ""
}

func (x *SchedulePlan) GetHookUrl() string {
	if x != nil {
		return x.HookUrl
	}
	return ""
}

func (x *SchedulePlan) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

func (x *SchedulePlan) GetInterval() int32 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *SchedulePlan) GetLoopCnt() int32 {
	if x != nil {
		return x.LoopCnt
	}
	return 0
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_brunowang_srvtools_scheduler_pb_scheduler_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_brunowang_srvtools_scheduler_pb_scheduler_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_github_com_brunowang_srvtools_scheduler_pb_scheduler_proto_rawDescGZIP(), []int{12}
}

var File_github_com_brunowang_srvtools_scheduler_pb_scheduler_proto protoreflect.FileDescriptor

var file_github_com_brunowang_srvtools_scheduler_pb_scheduler_proto_rawDesc = []byte{
	0x0a, 0x3a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x72, 0x75,
	0x6e, 0x6f, 0x77, 0x61, 0x6e, 0x67, 0x2f, 0x73, 0x72, 0x76, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2f,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x70, 0x62, 0x2f, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1c, 0x62, 0x72,
	0x75, 0x6e, 0x6f, 0x77, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x72, 0x76, 0x74, 0x6f, 0x6f, 0x6c, 0x73,
	0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x22, 0x52, 0x0a, 0x10, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x3e,
	0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x62,
	0x72, 0x75, 0x6e, 0x6f, 0x77, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x72, 0x76, 0x74, 0x6f, 0x6f, 0x6c,
	0x73, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22, 0x2b,
	0x0a, 0x10, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52,
	0x73, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x22, 0x2c, 0x0a, 0x11, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x22, 0x31, 0x0a, 0x16, 0x52, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x22, 0x70, 0x0a, 0x13,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x61, 0x64, 0x79, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x70,
	0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6c,
	0x61, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x5f,
	0x0a, 0x13, 0x47, 0x65, 0x74, 0x52, 0x65, 0x61, 0x64, 0x79, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x52, 0x73, 0x70, 0x12, 0x48, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x62, 0x72, 0x75, 0x6e, 0x6f,
	0x77, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x72, 0x76, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x22,
	0x46, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x70, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x22, 0x28, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x73, 0x70, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x22, 0x57, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x3e, 0x0a, 0x04, 0x70, 0x6c,
	0x61, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x62, 0x72, 0x75, 0x6e, 0x6f,
	0x77, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x72, 0x76, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x50, 0x6c, 0x61, 0x6e, 0x52, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x22, 0x30, 0x0a, 0x15, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x6e,
	0x52, 0x73, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x22, 0x58, 0x0a, 0x0c,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x17, 0x0a, 0x07,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x69,
	0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x93, 0x01, 0x0a, 0x0c, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x68, 0x6f, 0x6f, 0x6b, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x68, 0x6f, 0x6f, 0x6b, 0x55, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x6f, 0x70, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x6c, 0x6f, 0x6f, 0x70, 0x43, 0x6e, 0x74, 0x22, 0x07, 0x0a, 0x05,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x32, 0xce, 0x05, 0x0a, 0x10, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x6f, 0x0a, 0x0d, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x2e, 0x2e, 0x62, 0x72,
	0x75, 0x6e, 0x6f, 0x77, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x72, 0x76, 0x74, 0x6f, 0x6f, 0x6c, 0x73,
	0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x2e, 0x2e, 0x62, 0x72,
	0x75, 0x6e, 0x6f, 0x77, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x72, 0x76, 0x74, 0x6f, 0x6f, 0x6c, 0x73,
	0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x73, 0x70, 0x12, 0x66, 0x0a, 0x0e, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x2f, 0x2e,
	0x62, 0x72, 0x75, 0x6e, 0x6f, 0x77, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x72, 0x76, 0x74, 0x6f, 0x6f,
	0x6c, 0x73, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x23,
	0x2e, 0x62, 0x72, 0x75, 0x6e, 0x6f, 0x77, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x72, 0x76, 0x74, 0x6f,
	0x6f, 0x6c, 0x73, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x70, 0x0a, 0x13, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x34, 0x2e, 0x62, 0x72, 0x75,
	0x6e, 0x6f, 0x77, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x72, 0x76, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71,
	0x1a, 0x23, 0x2e, 0x62, 0x72, 0x75, 0x6e, 0x6f, 0x77, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x72, 0x76,
	0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x78, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x52, 0x65, 0x61, 0x64,
	0x79, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x31, 0x2e, 0x62, 0x72, 0x75, 0x6e,
	0x6f, 0x77, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x72, 0x76, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x61, 0x64,
	0x79, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x31, 0x2e, 0x62,
	0x72, 0x75, 0x6e, 0x6f, 0x77, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x72, 0x76, 0x74, 0x6f, 0x6f, 0x6c,
	0x73, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x61, 0x64, 0x79, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x73, 0x70, 0x12,
	0x75, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x30, 0x2e, 0x62, 0x72, 0x75, 0x6e, 0x6f, 0x77, 0x61, 0x6e, 0x67, 0x2e, 0x73,
	0x72, 0x76, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x52, 0x65, 0x71, 0x1a, 0x30, 0x2e, 0x62, 0x72, 0x75, 0x6e, 0x6f, 0x77, 0x61, 0x6e, 0x67,
	0x2e, 0x73, 0x72, 0x76, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x52, 0x73, 0x70, 0x12, 0x7e, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x33, 0x2e, 0x62,
	0x72, 0x75, 0x6e, 0x6f, 0x77, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x72, 0x76, 0x74, 0x6f, 0x6f, 0x6c,
	0x73, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65,
	0x71, 0x1a, 0x33, 0x2e, 0x62, 0x72, 0x75, 0x6e, 0x6f, 0x77, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x72,
	0x76, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50,
	0x6c, 0x61, 0x6e, 0x52, 0x73, 0x70, 0x42, 0x29, 0x5a, 0x27, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x72, 0x75, 0x6e, 0x6f, 0x77, 0x61, 0x6e, 0x67, 0x2f, 0x73,
	0x72, 0x76, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_github_com_brunowang_srvtools_scheduler_pb_scheduler_proto_rawDescOnce sync.Once
	file_github_com_brunowang_srvtools_scheduler_pb_scheduler_proto_rawDescData = file_github_com_brunowang_srvtools_scheduler_pb_scheduler_proto_rawDesc
)

func file_github_com_brunowang_srvtools_scheduler_pb_scheduler_proto_rawDescGZIP() []byte {
	file_github_com_brunowang_srvtools_scheduler_pb_scheduler_proto_rawDescOnce.Do(func() {
		file_github_com_brunowang_srvtools_scheduler_pb_scheduler_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_brunowang_srvtools_scheduler_pb_scheduler_proto_rawDescData)
	})
	return file_github_com_brunowang_srvtools_scheduler_pb_scheduler_proto_rawDescData
}

var file_github_com_brunowang_srvtools_scheduler_pb_scheduler_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_github_com_brunowang_srvtools_scheduler_pb_scheduler_proto_goTypes = []interface{}{
	(*StartScheduleReq)(nil),       // 0: brunowang.srvtools.scheduler.StartScheduleReq
	(*StartScheduleRsp)(nil),       // 1: brunowang.srvtools.scheduler.StartScheduleRsp
	(*CancelScheduleReq)(nil),      // 2: brunowang.srvtools.scheduler.CancelScheduleReq
	(*RefreshScheduleTimeReq)(nil), // 3: brunowang.srvtools.scheduler.RefreshScheduleTimeReq
	(*GetReadyScheduleReq)(nil),    // 4: brunowang.srvtools.scheduler.GetReadyScheduleReq
	(*GetReadyScheduleRsp)(nil),    // 5: brunowang.srvtools.scheduler.GetReadyScheduleRsp
	(*GetScheduleTimeReq)(nil),     // 6: brunowang.srvtools.scheduler.GetScheduleTimeReq
	(*GetScheduleTimeRsp)(nil),     // 7: brunowang.srvtools.scheduler.GetScheduleTimeRsp
	(*CreateSchedulePlanReq)(nil),  // 8: brunowang.srvtools.scheduler.CreateSchedulePlanReq
	(*CreateSchedulePlanRsp)(nil),  // 9: brunowang.srvtools.scheduler.CreateSchedulePlanRsp
	(*ScheduleItem)(nil),           // 10: brunowang.srvtools.scheduler.ScheduleItem
	(*SchedulePlan)(nil),           // 11: brunowang.srvtools.scheduler.SchedulePlan
	(*Empty)(nil),                  // 12: brunowang.srvtools.scheduler.Empty
}
var file_github_com_brunowang_srvtools_scheduler_pb_scheduler_proto_depIdxs = []int32{
	10, // 0: brunowang.srvtools.scheduler.StartScheduleReq.item:type_name -> brunowang.srvtools.scheduler.ScheduleItem
	10, // 1: brunowang.srvtools.scheduler.GetReadyScheduleRsp.schedules:type_name -> brunowang.srvtools.scheduler.ScheduleItem
	11, // 2: brunowang.srvtools.scheduler.CreateSchedulePlanReq.plan:type_name -> brunowang.srvtools.scheduler.SchedulePlan
	0,  // 3: brunowang.srvtools.scheduler.SchedulerService.StartSchedule:input_type -> brunowang.srvtools.scheduler.StartScheduleReq
	2,  // 4: brunowang.srvtools.scheduler.SchedulerService.CancelSchedule:input_type -> brunowang.srvtools.scheduler.CancelScheduleReq
	3,  // 5: brunowang.srvtools.scheduler.SchedulerService.RefreshScheduleTime:input_type -> brunowang.srvtools.scheduler.RefreshScheduleTimeReq
	4,  // 6: brunowang.srvtools.scheduler.SchedulerService.GetReadySchedule:input_type -> brunowang.srvtools.scheduler.GetReadyScheduleReq
	6,  // 7: brunowang.srvtools.scheduler.SchedulerService.GetScheduleTime:input_type -> brunowang.srvtools.scheduler.GetScheduleTimeReq
	8,  // 8: brunowang.srvtools.scheduler.SchedulerService.CreateSchedulePlan:input_type -> brunowang.srvtools.scheduler.CreateSchedulePlanReq
	1,  // 9: brunowang.srvtools.scheduler.SchedulerService.StartSchedule:output_type -> brunowang.srvtools.scheduler.StartScheduleRsp
	12, // 10: brunowang.srvtools.scheduler.SchedulerService.CancelSchedule:output_type -> brunowang.srvtools.scheduler.Empty
	12, // 11: brunowang.srvtools.scheduler.SchedulerService.RefreshScheduleTime:output_type -> brunowang.srvtools.scheduler.Empty
	5,  // 12: brunowang.srvtools.scheduler.SchedulerService.GetReadySchedule:output_type -> brunowang.srvtools.scheduler.GetReadyScheduleRsp
	7,  // 13: brunowang.srvtools.scheduler.SchedulerService.GetScheduleTime:output_type -> brunowang.srvtools.scheduler.GetScheduleTimeRsp
	9,  // 14: brunowang.srvtools.scheduler.SchedulerService.CreateSchedulePlan:output_type -> brunowang.srvtools.scheduler.CreateSchedulePlanRsp
	9,  // [9:15] is the sub-list for method output_type
	3,  // [3:9] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_github_com_brunowang_srvtools_scheduler_pb_scheduler_proto_init() }
func file_github_com_brunowang_srvtools_scheduler_pb_scheduler_proto_init() {
	if File_github_com_brunowang_srvtools_scheduler_pb_scheduler_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_github_com_brunowang_srvtools_scheduler_pb_scheduler_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartScheduleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_brunowang_srvtools_scheduler_pb_scheduler_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartScheduleRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_brunowang_srvtools_scheduler_pb_scheduler_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelScheduleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_brunowang_srvtools_scheduler_pb_scheduler_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshScheduleTimeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_brunowang_srvtools_scheduler_pb_scheduler_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReadyScheduleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_brunowang_srvtools_scheduler_pb_scheduler_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReadyScheduleRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_brunowang_srvtools_scheduler_pb_scheduler_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetScheduleTimeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_brunowang_srvtools_scheduler_pb_scheduler_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetScheduleTimeRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_brunowang_srvtools_scheduler_pb_scheduler_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSchedulePlanReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_brunowang_srvtools_scheduler_pb_scheduler_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSchedulePlanRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_brunowang_srvtools_scheduler_pb_scheduler_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduleItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_brunowang_srvtools_scheduler_pb_scheduler_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchedulePlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_brunowang_srvtools_scheduler_pb_scheduler_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_brunowang_srvtools_scheduler_pb_scheduler_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_github_com_brunowang_srvtools_scheduler_pb_scheduler_proto_goTypes,
		DependencyIndexes: file_github_com_brunowang_srvtools_scheduler_pb_scheduler_proto_depIdxs,
		MessageInfos:      file_github_com_brunowang_srvtools_scheduler_pb_scheduler_proto_msgTypes,
	}.Build()
	File_github_com_brunowang_srvtools_scheduler_pb_scheduler_proto = out.File
	file_github_com_brunowang_srvtools_scheduler_pb_scheduler_proto_rawDesc = nil
	file_github_com_brunowang_srvtools_scheduler_pb_scheduler_proto_goTypes = nil
	file_github_com_brunowang_srvtools_scheduler_pb_scheduler_proto_depIdxs = nil
}
